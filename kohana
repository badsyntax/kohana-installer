#!/bin/bash

#
# General configuration
#
DEFAULT_BRANCH="3.1/master"
INSTALL_SKELETON=1
LOCAL_CONFIG="$HOME/.kohana.conf"

# Load local configuration
[ -f $LOCAL_CONFIG ] && . $LOCAL_CONFIG

#
# Defaults
#
VERSION="0.3.3"
GITHUB="https://github.com"
INSTALL_DIR="."
MODULES=()
LOGS=""
VERBOSE=0
DRY_RUN=0

#
# Exit error codes
#
ERROR_USAGE=2
ERROR_MISSING_ARGUMENTS=3
ERROR_GIT=4
ERROR_CURL=5

#
# Functions
#
usage() {
	echo "kohana <action> [<options>] [<directory>]"
	exit $ERROR_USAGE
}

usage_long() {
less << EOF
USAGE
	kohana [<options>] [<directory>]

DESCRIPTION
	Kohana Framework Installer

DIRECTORY
	If no directory is specified, the current directory will be used.

OPTIONS
	-h, --help	Show this help
	-s, --skeleton	Install skeleton files
	-n, --no-skeleton	Do not install skeleton files
	-b, --branch	Specify the branch to use
	--version	Print current installer version

EXAMPLES
	. kohana -s -b 3.0/master
	. kohana -s /www/apps/kohana

VERSION
	$VERSION
EOF
exit 0
}

# Checks if last comand was successful
check_exit_status() {
	if [ $? -ne 0 ]; then
		print_error_and_die "$1, exiting..." $2
	fi
}

# Simple log function
write_log() {
	if [ $VERBOSE -eq 1 ]; then
		echo "$(date): $1"
	else
		LOGS=$LOGS"$(date): $1"
	fi
}

# Simple error printer
print_error_and_die() {
	if [ $VERBOSE -eq 1 ]; then
		echo "fatal: $1"
	else
		write_log "fatal: $1"
	fi
	exit $2
}

#
# Action: install
#
action_install() {
	create_install_dir
	initialize_git
	install_system
	prompt_modules
	[ $INSTALL_SKELETON -eq 1 ] && install_application
}

# Create installation directory
create_install_dir() {
	if [ ! -d "$INSTALL_DIR" ]; then
		write_log "Creating installation directory $INSTALL_DIR"
		if [ $DRY_RUN -eq 0 ]; then
			mkdir "$INSTALL_DIR" > /dev/null 2>&1
			check_exit_status "Could not create installation directory" 1
		fi
	fi
	# Change to installation directory
	[ -d "$INSTALL_DIR" ] && cd "$INSTALL_DIR"
}

# Initialize git directory
initialize_git() {
	if [ ! -d "$INSTALL_DIR/.git" ]; then
		write_log "Initializing git repository in $INSTALL_DIR"
		if [ $DRY_RUN -eq 0 ]; then
			git init > /dev/null 2>&1
			check_exit_status "Could not initialize git" $ERROR_GIT
		fi
	fi
}

# Install Kohana system files
install_system() {
	if [ ! -d "$INSTALL_DIR/system" ]; then
		write_log "Installing core system files to $INSTALL_DIR/system"
		if [ $DRY_RUN -eq 0 ]; then
			install_module "kohana/core" "system" || return 1
			commit "Installed Kohana system"
		fi
	fi
}

# Install application skeleton files
install_application() {
	if [ ! -d "$INSTALL_DIR/application" ]; then
		write_log "Creating application directories"

		if [ $DRY_RUN -eq 0 ]; then
			# controllers and models
			mkdir -p application/classes/{controller,model}
			mkdir -p application/{config,views}

			# cache and logs must be writable
			mkdir -m 0777 -p application/{cache,logs}

			# ignore log and cache files
			echo '[^.]*' > application/logs/.gitignore
			echo '[^.]*' > application/cache/.gitignore
		fi

		write_log "Downloading skeleton files"

		if [ $DRY_RUN -eq 0 ]; then
			# get index.php
			curl --location --output index.php "$GITHUB/kohana/kohana/raw/$DEFAULT_BRANCH/index.php" > /dev/null 2>&1
			check_exit_status "Failed to create skeleton: index.php" $ERROR_CURL

			# get bootstrap.php
			curl --location --output application/bootstrap.php "$GITHUB/kohana/kohana/raw/$DEFAULT_BRANCH/application/bootstrap.php" > /dev/null 2>&1
			check_exit_status "Failed to create skeleton: application/bootstrap.php" $ERROR_CURL

			# get .htaccess
			curl --location --output .htaccess "$GITHUB/kohana/kohana/raw/$DEFAULT_BRANCH/example.htaccess" > /dev/null 2>&1
			check_exit_status "Failed to create skeleton: .htaccess" $ERROR_CURL

			# Stage skeleton
			git add .htaccess index.php application > /dev/null 2>&1
			check_exit_status "Failed to stage skeleton files" $ERROR_GIT
		fi

		commit "Application skeleton created"
	fi
}


# Make a git commit
commit() {
	[ -z "$1" ] && print_error_and_die "Must provide a commit message" $ERROR_MISSING_ARGUMENTS

	write_log "Committing: $1"

	if [ $DRY_RUN -eq 0 ]; then
		git commit -m "$1" > /dev/null 2>&1
		check_exit_status "Commit failed" $ERROR_GIT
	fi
}

# Install a module
install_module() {
	[ -z "$1" ] && print_error_and_die "Must provide a module name" $ERROR_MISSING_ARGUMENTS
	[ -z "$2" ] && print_error_and_die "Must provide a module path" $ERROR_MISSING_ARGUMENTS

	write_log "Installing $1 to $2"

	branch="$DEFAULT_BRANCH"
	while [ 1 ]; do
		status=$(curl --silent --head --write-out "%{http_code}" $GITHUB/$1/tree/$branch | tail -n 1)
		case "$status" in
			301)
				# Probably the default branch
				opts=()
				break
				;;
			200)
				# Not the default branch
				opts=(-b "$branch")
				break
				;;
			*)
				write_log "Branch $branch of $1 does not exist"
				echo -n "What branch of $1 do you want to install? "
				read branch
				if [ -z "$branch" ]; then
					write_log "Skipping installation of $1, no suitable branch found"
					break
				fi
				;;
		esac
	done

	if [ $DRY_RUN -eq 0 ] && [ -n "$branch" ]; then
		git submodule add "${opts[@]}" "$GITHUB/$1.git" "$2" > /dev/null 2>&1
		check_exit_status "Failed to install submodule" $ERROR_GIT
	fi
}

# Prompt for modules to install
prompt_modules() {
	while [ 1 ]; do
		echo -n "What module would you like to install? "
		read module

		[ -z "$module" ] && break

		case "$module" in
			*/*)
				# Do nothing, full path given
				;;
			*)
				# Assume this a Kohana module
				module="kohana/$module"
				;;
		esac

		name=$(basename "$module" | tr '[:upper:]' '[:lower:]')
		install_module "$module" "modules/$name"
		commit "Installed $module to modules/$name"
	done
}

#
# Handle execution
#
main() {
	if [ "$INSTALL_DIR" = "." ]; then
		dir="current directory"
	else
		dir="'$INSTALL_DIR/'"
	fi
	if [ -d "$INSTALL_DIR/system/.git" ]; then
		action="Upgrade"
		cd "$INSTALL_DIR/system" > /dev/null 2>&1
		branch=$(git branch | egrep '^\*' | cut -d" " -f 2-)
		cd - > /dev/null 2>&1
		if [ "$branch" != "$DEFAULT_BRANCH" ]; then
			echo -n "Use currently installed branch '$branch' instead of '$DEFAULT_BRANCH'? (Y/n) "
			read response
			case "$response" in
				n*|N*)
					# Do not switch branches
					;;
				*)
					DEFAULT_BRANCH="$branch"
					;;
			esac
		fi
		echo -n "Upgrade Kohana $DEFAULT_BRANCH in $dir? (Y/n) "
	else
		echo -n "Install Kohana $DEFAULT_BRANCH to $dir? (Y/n) "
	fi
	read response
	case "$response" in
		n*|N*)
			echo "Install aborted."
			exit 0
			;;
	esac
	# Start installation
	action_install
	exit 0
}

# Parse parameters
while test $# != 0; do
	case "$1" in
		-h|--help)
			usage_long
			;;
		-s|--skeleton)
			INSTALL_SKELETON=1
			;;
		-n|--no-skeleton)
			INSTALL_SKELETON=0
			;;
		-b|--branch*)
			case "$#,$1" in
				*,*=*)
					DEFAULT_BRANCH=$(expr "z$1" : 'z-[^=]*=\(.*\)')
					;;
				*)
					if [ ! $(echo "$2" | egrep '^-' | wc -l) -eq 1 ]; then
						DEFAULT_BRANCH="$2"
						shift
					else
						print_error_and_die "Must specify a branch name with --branch" $ERROR_MISSING_ARGUMENTS
					fi
					;;
			esac
			;;
		-v|--verbose)
			VERBOSE=1
			;;
		-D|--dry-run)
			DRY_RUN=1
			write_log "Dry run, no actions will be taken"
			;;
		--version)
			echo "kohana version $VERSION"
			exit 0
			;;
		*)
			# Pass through the directory name
			[ -n "$1" ] && INSTALL_DIR="$1"
			;;
	esac
	shift
done
main
